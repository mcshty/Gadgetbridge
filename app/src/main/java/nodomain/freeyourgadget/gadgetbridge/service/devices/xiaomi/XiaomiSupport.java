/*  Copyright (C) 2023 Jos√© Rebelo, Andreas Shimokawa

    This file is part of Gadgetbridge.

    Gadgetbridge is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Gadgetbridge is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>. */
package nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi;


import static nodomain.freeyourgadget.gadgetbridge.activities.devicesettings.DeviceSettingsPreferenceConst.PREF_FORCE_CONNECTION_TYPE;

import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.location.Location;
import android.net.Uri;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import nodomain.freeyourgadget.gadgetbridge.GBApplication;
import nodomain.freeyourgadget.gadgetbridge.R;
import nodomain.freeyourgadget.gadgetbridge.devices.DeviceCoordinator;
import nodomain.freeyourgadget.gadgetbridge.devices.xiaomi.XiaomiCoordinator;
import nodomain.freeyourgadget.gadgetbridge.devices.xiaomi.XiaomiFWHelper;
import nodomain.freeyourgadget.gadgetbridge.impl.GBDevice;
import nodomain.freeyourgadget.gadgetbridge.model.Alarm;
import nodomain.freeyourgadget.gadgetbridge.model.CalendarEventSpec;
import nodomain.freeyourgadget.gadgetbridge.model.CallSpec;
import nodomain.freeyourgadget.gadgetbridge.model.CannedMessagesSpec;
import nodomain.freeyourgadget.gadgetbridge.model.Contact;
import nodomain.freeyourgadget.gadgetbridge.model.MusicSpec;
import nodomain.freeyourgadget.gadgetbridge.model.MusicStateSpec;
import nodomain.freeyourgadget.gadgetbridge.model.NotificationSpec;
import nodomain.freeyourgadget.gadgetbridge.model.Reminder;
import nodomain.freeyourgadget.gadgetbridge.model.WeatherSpec;
import nodomain.freeyourgadget.gadgetbridge.model.WorldClock;
import nodomain.freeyourgadget.gadgetbridge.proto.xiaomi.XiaomiProto;
import nodomain.freeyourgadget.gadgetbridge.service.AbstractDeviceSupport;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.AbstractXiaomiService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiCalendarService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiDataUploadService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiHealthService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiMusicService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiNotificationService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiPhonebookService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiScheduleService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiSystemService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiWatchfaceService;
import nodomain.freeyourgadget.gadgetbridge.service.devices.xiaomi.services.XiaomiWeatherService;
import nodomain.freeyourgadget.gadgetbridge.util.GB;
import nodomain.freeyourgadget.gadgetbridge.util.Prefs;

public class XiaomiSupport extends AbstractDeviceSupport {
    private static final Logger LOG = LoggerFactory.getLogger(XiaomiSupport.class);

    private final XiaomiAuthService authService = new XiaomiAuthService(this);
    private final XiaomiMusicService musicService = new XiaomiMusicService(this);
    private final XiaomiHealthService healthService = new XiaomiHealthService(this);
    private final XiaomiNotificationService notificationService = new XiaomiNotificationService(this);
    private final XiaomiScheduleService scheduleService = new XiaomiScheduleService(this);
    private final XiaomiWeatherService weatherService = new XiaomiWeatherService(this);
    private final XiaomiSystemService systemService = new XiaomiSystemService(this);
    private final XiaomiCalendarService calendarService = new XiaomiCalendarService(this);
    private final XiaomiWatchfaceService watchfaceService = new XiaomiWatchfaceService(this);
    private final XiaomiDataUploadService dataUploadService = new XiaomiDataUploadService(this);
    private final XiaomiPhonebookService phonebookService = new XiaomiPhonebookService(this);

    private String cachedFirmwareVersion = null;
    private XiaomiConnectionSupport connectionSupport = null;

    private final Map<Integer, AbstractXiaomiService> mServiceMap = new LinkedHashMap<Integer, AbstractXiaomiService>() {{
        put(XiaomiAuthService.COMMAND_TYPE, authService);
        put(XiaomiMusicService.COMMAND_TYPE, musicService);
        put(XiaomiHealthService.COMMAND_TYPE, healthService);
        put(XiaomiNotificationService.COMMAND_TYPE, notificationService);
        put(XiaomiScheduleService.COMMAND_TYPE, scheduleService);
        put(XiaomiWeatherService.COMMAND_TYPE, weatherService);
        put(XiaomiSystemService.COMMAND_TYPE, systemService);
        put(XiaomiCalendarService.COMMAND_TYPE, calendarService);
        put(XiaomiWatchfaceService.COMMAND_TYPE, watchfaceService);
        put(XiaomiDataUploadService.COMMAND_TYPE, dataUploadService);
        put(XiaomiPhonebookService.COMMAND_TYPE, phonebookService);
    }};

    @Override
    public boolean useAutoConnect() {
        return true;
    }

    @Override
    public boolean getImplicitCallbackModify() {
        return false;
    }

    private DeviceCoordinator.ConnectionType getForcedConnectionTypeFromPrefs() {
        final String connTypeAuto = getContext().getString(R.string.pref_force_connection_type_auto_value);
        String connTypePref = getDevicePrefs().getString(PREF_FORCE_CONNECTION_TYPE, connTypeAuto);

        if (getContext().getString(R.string.pref_force_connection_type_ble_value).equals(connTypePref))
            return DeviceCoordinator.ConnectionType.BLE;

        if (getContext().getString(R.string.pref_force_connection_type_bt_classic_value).equals(connTypePref))
            return DeviceCoordinator.ConnectionType.BT_CLASSIC;

        // either set to default, unknown option selected, or has not been set
        return DeviceCoordinator.ConnectionType.BOTH;
    }

    private XiaomiConnectionSupport createConnectionSpecificSupport() {
        DeviceCoordinator.ConnectionType connType = getCoordinator().getConnectionType();

        if (connType == DeviceCoordinator.ConnectionType.BOTH) {
            connType = getForcedConnectionTypeFromPrefs();
        }

        switch (connType) {
            case BT_CLASSIC:
                return new XiaomiSppSupport(this);
            default:
                LOG.error("Unknown connection type {}, defaulting to BLE device support", connType);
            case BLE: // device coordinator inherits from AbstractBtLEDeviceSupport
            case BOTH:
                return new XiaomiBleSupport(this);
        }
    }

    public XiaomiConnectionSupport getConnectionSpecificSupport() {
        if (connectionSupport == null) {
            connectionSupport = createConnectionSpecificSupport();
        }

        return connectionSupport;
    }

    @Override
    public boolean connect() {
        if (didCallSelf()) {
            return false;
        }

        if (getConnectionSpecificSupport() != null)
            return getConnectionSpecificSupport().connect();

        LOG.error("getConnectionSpecificSupport returned null, could not connect");
        return false;
    }

    public void onUploadProgress(int textRsrc, int progressPercent) {
        if (didCallSelf()) {
            return;
        }

        if (getConnectionSpecificSupport() == null) {
            LOG.error("onUploadProgress called but connection specific unavailable");
            return;
        }

        getConnectionSpecificSupport().onUploadProgress(textRsrc, progressPercent);
    }

    @Override
    public void dispose() {
        if (didCallSelf()) {
            return;
        }

        if (getConnectionSpecificSupport() != null) {
            getConnectionSpecificSupport().dispose();
            connectionSupport = null;
        }
    }

    public void setContext(final GBDevice device, final BluetoothAdapter adapter, final Context context) {
        if (didCallSelf()) {
            return;
        }

        // FIXME unsetDynamicState unsets the fw version, which causes problems..
        if (getCachedFirmwareVersion() == null && device.getFirmwareVersion() != null) {
            setCachedFirmwareVersion(device.getFirmwareVersion());
        }

        super.setContext(device, adapter, context);

        for (AbstractXiaomiService service : mServiceMap.values()) {
            service.setContext(context);
        }

        if (getConnectionSpecificSupport() != null) {
            getConnectionSpecificSupport().setContext(device, adapter, context);
        }
    }

    public boolean didCallSelf() {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();

        if (stackTrace[3].getClassName().equals(stackTrace[4].getClassName())) {
            if (connectionSupport != null) {
                LOG.warn("Detected recursive self-call; did connection specific support class {} implement {}?",
                        connectionSupport.getClass().getSimpleName(),
                        stackTrace[3].getMethodName());
            }

            return true;
        }
        return stackTrace[3].getClassName().equals(stackTrace[4].getClassName());
    }

    public String getCachedFirmwareVersion() {
        return this.cachedFirmwareVersion;
    }

    public void setCachedFirmwareVersion(String version) {
        this.cachedFirmwareVersion = version;
    }

    public void disconnect() {
        if (didCallSelf()) {
            return;
        }

        if (getConnectionSpecificSupport() != null) {
            getConnectionSpecificSupport().disconnect();
        }
    }

    public void handleCommandBytes(final byte[] plainValue) {
        LOG.debug("Got command: {}", GB.hexdump(plainValue));

        final XiaomiProto.Command cmd;
        try {
            cmd = XiaomiProto.Command.parseFrom(plainValue);
        } catch (final Exception e) {
            LOG.error("Failed to parse bytes as protobuf command payload", e);
            return;
        }

        final AbstractXiaomiService service = mServiceMap.get(cmd.getType());
        if (service != null) {
            service.handleCommand(cmd);
            return;
        }

        LOG.warn("Unexpected watch command type {}", cmd.getType());
    }

    @Override
    public void onSendConfiguration(final String config) {
        final Prefs prefs = getDevicePrefs();

        // Check if any of the services handles this config
        for (final AbstractXiaomiService service : mServiceMap.values()) {
            if (service.onSendConfiguration(config, prefs)) {
                return;
            }
        }

        LOG.warn("Unhandled config changed: {}", config);
    }

    @Override
    public void onSetTime() {
        systemService.setCurrentTime();

        if (getCoordinator().supportsCalendarEvents()) {
            // TODO this should not be done here
            calendarService.syncCalendar();
        }
    }

    @Override
    public void onTestNewFunction() {
        sendCommand("test new function", 2, 29);
    }

    @Override
    public void onFindPhone(final boolean start) {
        systemService.onFindPhone(start);
    }

    @Override
    public void onFindDevice(final boolean start) {
        systemService.onFindWatch(start);
    }

    @Override
    public void onSetPhoneVolume(final float volume) {
        musicService.onSetPhoneVolume(volume);
    }

    @Override
    public void onSetGpsLocation(final Location location) {
        healthService.onSetGpsLocation(location);
    }

    @Override
    public void onSetReminders(final ArrayList<? extends Reminder> reminders) {
        scheduleService.onSetReminders(reminders);
    }

    @Override
    public void onSetWorldClocks(final ArrayList<? extends WorldClock> clocks) {
        scheduleService.onSetWorldClocks(clocks);
    }

    @Override
    public void onNotification(final NotificationSpec notificationSpec) {
        notificationService.onNotification(notificationSpec);
    }

    @Override
    public void onDeleteNotification(final int id) {
        notificationService.onDeleteNotification(id);
    }

    @Override
    public void onSetAlarms(final ArrayList<? extends Alarm> alarms) {
        scheduleService.onSetAlarms(alarms);
    }

    @Override
    public void onSetCallState(final CallSpec callSpec) {
        notificationService.onSetCallState(callSpec);
    }

    @Override
    public void onSetCannedMessages(final CannedMessagesSpec cannedMessagesSpec) {
        notificationService.onSetCannedMessages(cannedMessagesSpec);
    }

    @Override
    public void onSetMusicState(final MusicStateSpec stateSpec) {
        musicService.onSetMusicState(stateSpec);
    }

    @Override
    public void onSetMusicInfo(final MusicSpec musicSpec) {
        musicService.onSetMusicInfo(musicSpec);
    }

    @Override
    public void onInstallApp(final Uri uri) {
        final XiaomiFWHelper fwHelper = new XiaomiFWHelper(uri, getContext());

        if (!fwHelper.isValid()) {
            LOG.warn("Uri {} is not valid", uri);
            return;
        }

        if (fwHelper.isFirmware()) {
            systemService.installFirmware(fwHelper);
        } else if (fwHelper.isWatchface()) {
            watchfaceService.installWatchface(fwHelper);
        } else {
            LOG.warn("Unknown fwhelper for {}", uri);
        }
    }

    @Override
    public void onAppInfoReq() {
        watchfaceService.requestWatchfaceList();
    }

    @Override
    public void onAppStart(final UUID uuid, boolean start) {
        if (start) {
            watchfaceService.setWatchface(uuid);
        }
    }

    @Override
    public void onAppDelete(final UUID uuid) {
        watchfaceService.deleteWatchface(uuid);
    }

    @Override
    public void onFetchRecordedData(final int dataTypes) {
        healthService.onFetchRecordedData(dataTypes);
    }

    @Override
    public void onHeartRateTest() {
        healthService.onHeartRateTest();
    }

    @Override
    public void onEnableRealtimeHeartRateMeasurement(final boolean enable) {
        healthService.enableRealtimeStats(enable);
    }

    @Override
    public void onEnableRealtimeSteps(final boolean enable) {
        healthService.enableRealtimeStats(enable);
    }

    @Override
    public void onEnableHeartRateSleepSupport(final boolean enable) {
        healthService.setHeartRateConfig();
    }

    @Override
    public void onSetHeartRateMeasurementInterval(final int seconds) {
        healthService.setHeartRateConfig();
    }

    @Override
    public void onAddCalendarEvent(final CalendarEventSpec calendarEventSpec) {
        calendarService.onAddCalendarEvent(calendarEventSpec);
    }

    @Override
    public void onDeleteCalendarEvent(final byte type, long id) {
        calendarService.onDeleteCalendarEvent(type, id);
    }

    @Override
    public void onSendWeather(final WeatherSpec weatherSpec) {
        weatherService.onSendWeather(weatherSpec);
    }

    @Override
    public void onSetContacts(ArrayList<? extends Contact> contacts) {
        phonebookService.setContacts((List<Contact>) contacts);
    }

    public XiaomiCoordinator getCoordinator() {
        return (XiaomiCoordinator) gbDevice.getDeviceCoordinator();
    }

    protected void onAuthSuccess() {
        LOG.info("onAuthSuccess");

        if (GBApplication.getPrefs().getBoolean("datetime_synconconnect", true)) {
            systemService.setCurrentTime();
        }

        for (final AbstractXiaomiService service : mServiceMap.values()) {
            service.initialize();
        }
    }

    public void sendCommand(final String taskName, final XiaomiProto.Command command) {
        if (didCallSelf()) {
            return;
        }

        getConnectionSpecificSupport().sendCommand(taskName, command);
    }

    public void sendCommand(final String taskName, final int type, final int subtype) {
        sendCommand(
                taskName,
                XiaomiProto.Command.newBuilder()
                        .setType(type)
                        .setSubtype(subtype)
                        .build()
        );
    }

    public XiaomiAuthService getAuthService() {
        return this.authService;
    }

    public XiaomiDataUploadService getDataUploadService() {
        return this.dataUploadService;
    }

    public XiaomiHealthService getHealthService() {
        return this.healthService;
    }

    @Override
    public String customStringFilter(final String inputString) {
        return StringUtils.replaceEach(inputString, EMOJI_SOURCE, EMOJI_TARGET);
    }

    private static final String[] EMOJI_SOURCE = new String[]{
            "\uD83D\uDE0D", // üòç
            "\uD83D\uDE18", // üòò
            "\uD83D\uDE02", // üòÇ
            "\uD83D\uDE0A", // üòä
            "\uD83D\uDE0E", // üòé
            "\uD83D\uDE09", // üòâ
            "\uD83D\uDC8B", // üíã
            "\uD83D\uDC4D", // üëç
            "\uD83E\uDD23", // ü§£
            "\uD83D\uDC95", // üíï
            "\uD83D\uDE00", // üòÄ
            "\uD83D\uDE04", // üòÑ
            "\uD83D\uDE2D", // üò≠
            "\uD83E\uDD7A", // ü•∫
            "\uD83D\uDE4F", // üôè
            "\uD83E\uDD70", // ü•∞
            "\uD83E\uDD14", // ü§î
            "\uD83D\uDD25", // üî•
            "\uD83D\uDE29", // üò©
            "\uD83D\uDE14", // üòî
            "\uD83D\uDE01", // üòÅ
            "\uD83D\uDC4C", // üëå
            "\uD83D\uDE0F", // üòè
            "\uD83D\uDE05", // üòÖ
            "\uD83E\uDD0D", // ü§ç
            "\uD83D\uDC94", // üíî
            "\uD83D\uDE0C", // üòå
            "\uD83D\uDE22", // üò¢
            "\uD83D\uDC99", // üíô
            "\uD83D\uDC9C", // üíú
            "\uD83C\uDFB6", // üé∂
            "\uD83D\uDE33", // üò≥
            "\uD83D\uDC96", // üíñ
            "\uD83D\uDE4C", // üôå
            "\uD83D\uDCAF", // üíØ
            "\uD83D\uDE48", // üôà
            "\uD83D\uDE0B", // üòã
            "\uD83D\uDE11", // üòë
            "\uD83D\uDE34", // üò¥
            "\uD83D\uDE2A", // üò™
            "\uD83D\uDE1C", // üòú
            "\uD83D\uDE1B", // üòõ
            "\uD83D\uDE1D", // üòù
            "\uD83D\uDE1E", // üòû
            "\uD83D\uDE15", // üòï
            "\uD83D\uDC97", // üíó
            "\uD83D\uDC4F", // üëè
            "\uD83D\uDE10", // üòê
            "\uD83D\uDC49", // üëâ
            "\uD83D\uDC9B", // üíõ
            "\uD83D\uDC9E", // üíû
            "\uD83D\uDCAA", // üí™
            "\uD83C\uDF39", // üåπ
            "\uD83D\uDC80", // üíÄ
            "\uD83D\uDE31", // üò±
            "\uD83D\uDC98", // üíò
            "\uD83E\uDD1F", // ü§ü
            "\uD83D\uDE21", // üò°
            "\uD83D\uDCF7", // üì∑
            "\uD83C\uDF38", // üå∏
            "\uD83D\uDE08", // üòà
            "\uD83D\uDC48", // üëà
            "\uD83C\uDF89", // üéâ
            "\uD83D\uDC81", // üíÅ
            "\uD83D\uDE4A", // üôä
            "\uD83D\uDC9A", // üíö
            "\uD83D\uDE2B", // üò´
            "\uD83D\uDE24", // üò§
            "\uD83D\uDC93", // üíì
            "\uD83C\uDF1A", // üåö
            "\uD83D\uDC47", // üëá
            "\uD83D\uDE07", // üòá
            "\uD83D\uDC4A", // üëä
            "\uD83D\uDC51", // üëë
            "\uD83D\uDE13", // üòì
            "\uD83D\uDE3B", // üòª
            "\uD83D\uDD34", // üî¥
            "\uD83D\uDE25", // üò•
            "\uD83E\uDD29", // ü§©
            "\uD83D\uDE1A", // üòö
            "\uD83D\uDE37", // üò∑
            "\uD83D\uDC4B", // üëã
            "\uD83D\uDCA5", // üí•
            "\uD83E\uDD2D", // ü§≠
            "\uD83C\uDF1F", // üåü
            "\uD83E\uDD71", // ü•±
            "\uD83D\uDCA9", // üí©
            "\uD83D\uDE80", // üöÄ
    };

    private static final String[] EMOJI_TARGET = new String[]{
            "ÍÄÇ", // üòç
            "ÍÄÉ", // üòò
            "ÍÄÑ", // üòÇ
            "ÍÄÖ", // üòä
            "ÍÄÜ", // üòé
            "ÍÄá", // üòâ
            "ÍÄà", // üíã
            "ÍÄâ", // üëç
            "ÍÄä", // ü§£
            "ÍÄã", // üíï
            "ÍÄå", // üòÄ
            "ÍÄç", // üòÑ
            "ÍÄé", // üò≠
            "ÍÄè", // ü•∫
            "ÍÄë", // üôè
            "ÍÄí", // ü•∞
            "ÍÄì", // ü§î
            "ÍÄî", // üî•
            "ÍÄó", // üò©
            "ÍÄò", // üòî
            "ÍÄô", // üòÅ
            "ÍÄö", // üëå
            "ÍÄõ", // üòè
            "ÍÄú", // üòÖ
            "ÍÄù", // ü§ç
            "ÍÄû", // üíî
            "ÍÄü", // üòå
            "ÍÄ†", // üò¢
            "ÍÄ°", // üíô
            "ÍÄ¢", // üíú
            "ÍÄ§", // üé∂
            "ÍÄ•", // üò≥
            "ÍÄ¶", // üíñ
            "ÍÄß", // üôå
            "ÍÄ®", // üíØ
            "ÍÄ©", // üôà
            "ÍÄ´", // üòã
            "ÍÄ¨", // üòë
            "ÍÄ≠", // üò¥
            "ÍÄÆ", // üò™
            "ÍÄØ", // üòú
            "ÍÄ∞", // üòõ
            "ÍÄ±", // üòù
            "ÍÄ≤", // üòû
            "ÍÄ≥", // üòï
            "ÍÄ¥", // üíó
            "ÍÄµ", // üëè
            "ÍÄ∂", // üòê
            "ÍÄ∑", // üëâ
            "ÍÄ∏", // üíõ
            "ÍÄπ", // üíû
            "ÍÄ∫", // üí™
            "ÍÄª", // üåπ
            "ÍÄº", // üíÄ
            "ÍÄΩ", // üò±
            "ÍÄæ", // üíò
            "ÍÄø", // ü§ü
            "ÍÅÄ", // üò°
            "ÍÅÅ", // üì∑
            "ÍÅÇ", // üå∏
            "ÍÅÉ", // üòà
            "ÍÅÑ", // üëà
            "ÍÅÖ", // üéâ
            "ÍÅÜ", // üíÅ
            "ÍÅá", // üôä
            "ÍÅà", // üíö
            "ÍÅâ", // üò´
            "ÍÅä", // üò§
            "ÍÅç", // üíì
            "ÍÅé", // üåö
            "ÍÅè", // üëá
            "ÍÅí", // üòá
            "ÍÅì", // üëä
            "ÍÅî", // üëë
            "ÍÅï", // üòì
            "ÍÅñ", // üòª
            "ÍÅó", // üî¥
            "ÍÅò", // üò•
            "ÍÅô", // ü§©
            "ÍÅö", // üòö
            "ÍÅú", // üò∑
            "ÍÅù", // üëã
            "ÍÅû", // üí•
            "ÍÅ†", // ü§≠
            "ÍÅ°", // üåü
            "ÍÅ¢", // ü•±
            "ÍÅ£", // üí©
            "ÍÅ§", // üöÄ
    };
}
